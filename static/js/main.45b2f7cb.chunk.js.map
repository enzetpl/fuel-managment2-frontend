{"version":3,"sources":["components/CarsDataService.js","components/AuthenticationService.js","components/AppNavbar.js","components/AddCarComponent.js","components/RefuelsDataService.js","components/AddRefuelComponent.js","components/AuthenticatedRoute.js","img/blood-drop.png","components/CarListComponent.js","components/HomeComponent.js","components/LoginComponent.js","components/LogoutComponent.js","components/RefuelsListComponent.js","components/RegisterComponent.js","components/StatsSummaryDataService.js","components/StatsSummaryComponent.js","components/FuelManagmentApp.js","App.js","reportWebVitals.js","index.js"],"names":["API_URL","axios","get","headers","Authorization","localStorage","getItem","car","post","carId","patch","id","delete","user","username","password","setItem","this","createBasicAuthToken","authorization","window","btoa","removeItem","AppNavbar","loginOrLogoutButton","registerButton","AuthenticationService","isUserLoggedIn","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Component","AddCarComponent","props","defaultItem","brand","model","productionYear","undefined","plate","fuelType","state","item","match","params","onSubmit","bind","CarsDataService","getCar","then","response","setState","data","values","setErrors","addCar","history","push","catch","err","reducedErrors","errors","reduce","acc","cur","fieldName","message","updateCar","initialValues","validateOnChange","validateOnBlur","enableReinitialize","name","component","as","variant","value","refuelId","refuel","AddRefuelComponent","emptyItem","volume","priceForLiter","refuelDate","Date","RefuelsDataService","getRefuel","refuelTime","addRefuel","updateRefuel","toLocaleDateString","toLocaleTimeString","validate","AuthenticatedRoute","to","CarListComponent","cars","refreshCars","deleteCar","retreiveAllCars","isLoggedIn","length","map","onClick","src","refuelIcon","height","showStats","showRefuels","HomeComponent","loggedIn","LoginComponent","badLoginMessage","executeBasicAuth","LogoutComponent","logoutUser","RefuelsListComponent","refuels","refreshRefuels","updateRefuels","deleteRefuel","retreiveAllRefuels","RegisterComponent","role","successMessage","register","email","startDate","endDate","URL","StatsSummaryComponent","toISOString","substr","StatsSummaryDataService","retreiveAllRefuelsForCar","console","log","summaryTable","totalRefuels","totalPrice","totalVolume","avgPricePerLiter","FuelManagmentApp","exact","path","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45b2f7cb.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst API_URL = 'http://fuelmng-env.eba-taegx2jp.eu-central-1.elasticbeanstalk.com/api'\r\n\r\n\r\nclass CarsDataService {\r\n\r\n\r\n    retreiveAllCars() {\r\n        return axios.get(`${API_URL}/cars`,  {headers: { Authorization: localStorage.getItem(\"user\")}});\r\n    }\r\n\r\n    addCar(car) {\r\n        return axios.post(`${API_URL}/cars`, car, {headers: { Authorization: localStorage.getItem(\"user\")}});\r\n    }\r\n    updateCar(carId, car) {\r\n        return axios.patch(`${API_URL}/cars/${carId}`, car, {headers: { Authorization: localStorage.getItem(\"user\")}});\r\n    }\r\n    getCar(id) {\r\n        return axios.get(`${API_URL}/cars/${id}`,{headers: { Authorization: localStorage.getItem(\"user\")}});\r\n    }\r\n    deleteCar(id) {\r\n        return axios.delete(`${API_URL}/cars/${id}`, {headers: { Authorization: localStorage.getItem(\"user\")}});\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default new CarsDataService()","import axios from 'axios'\r\n\r\nconst API_URL = 'https://cors-everywhere-me.herokuapp.com/http://fuelmng-env.eba-taegx2jp.eu-central-1.elasticbeanstalk.com'\r\n\r\nclass AuthenticationService {\r\n    isUserLoggedIn() {\r\n        let user = localStorage.getItem(\"user\");\r\n        return user!=null\r\n    }\r\n\r\n     async register(user) {\r\n        return axios.post(`${API_URL}/api/users/register`, user);\r\n    }\r\n\r\n    executeBasicAuth(username, password) {\r\n        localStorage.setItem(\"user\",  this.createBasicAuthToken(username, password));\r\n        return axios.get(`${API_URL}/api/auth`,\r\n            { headers: { authorization: this.createBasicAuthToken(username, password) } })\r\n    }\r\n\r\n    createBasicAuthToken(username, password) {\r\n        return 'Basic ' + window.btoa(username + \":\" + password)\r\n    }\r\n    logoutUser() {\r\n        localStorage.removeItem(\"user\");\r\n    }\r\n \r\n}\r\n\r\nexport default new AuthenticationService()","import { Component } from \"react\";\r\nimport AuthenticationService from \"./AuthenticationService\";\r\n\r\nclass AppNavbar extends Component {\r\n    render() {\r\n        let isUserLoggedIn = AuthenticationService.isUserLoggedIn();\r\n        let loginOrLogoutButton;\r\n        let registerButton = \"\";\r\n        if (isUserLoggedIn) {\r\n            loginOrLogoutButton = <a className=\"nav-item nav-link\" href=\"/logout\">logout</a>\r\n        } else {\r\n            loginOrLogoutButton = <a className=\"nav-item nav-link\" href=\"/login\">login</a>\r\n            registerButton = <a className=\"nav-item nav-link\" href=\"/register\">register</a>\r\n        }\r\n        return (\r\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                <span className=\"navbar-brand\">Navbar</span>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n                    <div className=\"navbar-nav\">\r\n                        <a className=\"nav-item nav-link\" href=\"/\">Home</a>\r\n                        <a className=\"nav-item nav-link\" href=\"/cars\">cars</a>\r\n                        {loginOrLogoutButton}\r\n                        {registerButton}\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AppNavbar","import { Component } from \"react\";\r\nimport CarsDataService from \"./CarsDataService\";\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport AppNavbar from \"./AppNavbar\";\r\nclass AddCarComponent extends Component {\r\n\r\n    defaultItem = {\r\n        brand: '',\r\n        model: '',\r\n        productionYear: undefined,\r\n        plate: undefined,\r\n        fuelType: \"DIESEL\"\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            item: this.defaultItem,\r\n            id: this.props.match.params.carId,\r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.state.id !== 'new') {\r\n            CarsDataService.getCar(this.state.id)\r\n                .then(response => {\r\n                    this.setState({ item: response.data })\r\n                })\r\n        }\r\n    }\r\n\r\n    onSubmit(values, { setErrors }) {\r\n        let car = values;\r\n        if (this.state.id === 'new') {\r\n            CarsDataService.addCar(car)\r\n                .then(() => this.props.history.push('/cars'))\r\n                .catch(err => {\r\n                    let errors = err.response.data.errors\r\n                    let reducedErrors = errors.reduce((acc, cur)=>({...acc, [cur.fieldName]: cur.message}),{})\r\n                    setErrors(reducedErrors);\r\n                })\r\n        } else {\r\n            CarsDataService.updateCar(this.state.id, car)\r\n                .then(() => this.props.history.push('/cars'))\r\n                .catch(err => {\r\n                    let errors = err.response.data.errors\r\n                    let reducedErrors = errors.reduce((acc, cur)=>({...acc, [cur.fieldName]: cur.message}),{})\r\n                    setErrors(reducedErrors);\r\n                })\r\n        }\r\n    }\r\n    render() {\r\n        let brand = this.state.item.brand;\r\n        let model = this.state.item.model;\r\n        let fuelType = this.state.item.fuelType;\r\n        let productionYear = this.state.item.productionYear;\r\n        let plate = this.state.item.plate\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <AppNavbar />\r\n                <Formik\r\n                    initialValues={{ brand, model, fuelType, productionYear, plate }}\r\n                    onSubmit={this.onSubmit}\r\n                    validateOnChange={false}\r\n                    validateOnBlur={false}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {\r\n                        (props) => (\r\n                            <Form>\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>brand</label>\r\n                                    <ErrorMessage name=\"brand\" component=\"div\" className=\"alert alert-warning\" />\r\n                                    <Field className=\"form-control\" type=\"text\" name=\"brand\" />\r\n                                </fieldset>\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>model</label>\r\n                                    <ErrorMessage name=\"model\" component=\"div\" className=\"alert alert-warning\" />\r\n                                    <Field className=\"form-control\" type=\"text\" name=\"model\" />\r\n                                </fieldset>\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>fuel type</label>\r\n                                    <Field component=\"select\" className=\"form-control\" as=\"select\" name=\"fuelType\" variant=\"outlined\" >\r\n                                        <option value=\"DIESEL\">diesel</option>\r\n                                        <option value=\"PETROL\">petrol</option>\r\n                                        <option value=\"GAS\">gas</option>\r\n                                    </Field>\r\n                                </fieldset>\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>production year</label>\r\n                                    <ErrorMessage name=\"productionYear\" component=\"div\" className=\"alert alert-warning\" />\r\n                                    <Field className=\"form-control\" type=\"number\" name=\"productionYear\" />\r\n                                </fieldset>\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>plate(optional)</label>\r\n                                    <ErrorMessage name=\"plate\" component=\"div\" className=\"alert alert-warning\" />\r\n                                    <Field className=\"form-control\" type=\"text\" name=\"plate\" />\r\n                                </fieldset>\r\n                                <button className=\"btn btn-success\" type=\"submit\">Save</button>\r\n                            </Form>\r\n                        )\r\n                    }\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default AddCarComponent","import axios from 'axios'\r\n\r\nconst API_URL = 'http://fuelmng-env.eba-taegx2jp.eu-central-1.elasticbeanstalk.com'\r\n\r\n\r\nclass RefuelsDataService {\r\n    getRefuel(carId, refuelId) {\r\n        return axios.get(`${API_URL}/cars/${carId}/refuels/${refuelId}`,{headers: { Authorization: localStorage.getItem(\"user\")}});\r\n    }\r\n    addCar(carId, refuel) {\r\n        return axios.post(`${API_URL}/cars/${carId}/refuels`, refuel, {headers: { Authorization: localStorage.getItem(\"user\")}});\r\n    }\r\n    retreiveAllRefuels(carId) {\r\n        return axios.get(`${API_URL}/cars/${carId}/refuels`,  {headers: { Authorization: localStorage.getItem(\"user\")}});\r\n    }\r\n    deleteRefuel(carId, id) {\r\n        return axios.delete(`${API_URL}/cars/${carId}/refuels/${id}`, {headers: { Authorization: localStorage.getItem(\"user\")}});\r\n\r\n    }\r\n    addRefuel(carId, refuel) {\r\n        return axios.post(`${API_URL}/cars/${carId}/refuels`, refuel, {headers: { Authorization: localStorage.getItem(\"user\")}});\r\n    }\r\n    updateRefuel(carId, refuelId, refuel) {\r\n        return axios.patch(`${API_URL}/cars/${carId}/refuels/${refuelId}`, refuel, {headers: { Authorization: localStorage.getItem(\"user\")}});\r\n    }\r\n\r\n}\r\n\r\nexport default new RefuelsDataService()","import { Component } from \"react\";\r\nimport RefuelsDataService from \"./RefuelsDataService\";\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport AppNavbar from \"./AppNavbar\";\r\n\r\n\r\nclass AddRefuelComponent extends Component {\r\n\r\n    emptyItem = {\r\n        volume: 0,\r\n        priceForLiter: 0,\r\n        refuelDate: new Date()\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            item: this.emptyItem,\r\n            id: this.props.match.params.refuelId\r\n\r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n\r\n    }\r\n    componentDidMount() {\r\n        if (this.state.id !== 'new') {\r\n            RefuelsDataService.getRefuel(this.props.match.params.carId, this.state.id)\r\n                .then(response => {\r\n                    response.data.refuelDate = new Date(response.data.refuelDate)\r\n                    this.setState({ item: response.data })\r\n                })\r\n        }\r\n    }\r\n\r\n    onSubmit(values, { setErrors }) {\r\n\r\n        let refuel = {\r\n            volume: values.volume,\r\n            priceForLiter: values.priceForLiter,\r\n            refuelDate: new Date(values.refuelDate + \" \" + values.refuelTime)\r\n        }\r\n        if (this.state.id === 'new') {\r\n            RefuelsDataService.addRefuel(this.props.match.params.carId, refuel)\r\n                .then(() => this.props.history.push(`/cars/${this.props.match.params.carId}/refuels`))\r\n                .catch(err => {\r\n                    let errors = err.response.data.errors\r\n                    let reducedErrors = errors.reduce((acc, cur)=>({...acc, [cur.fieldName]: cur.message}),{})\r\n                    setErrors(reducedErrors);\r\n                })\r\n        } else {\r\n            RefuelsDataService.updateRefuel(this.props.match.params.carId, this.state.id, refuel)\r\n                .then(() => this.props.history.push(`/cars/${this.props.match.params.carId}/refuels`))\r\n                .catch(err => {\r\n                    let errors = err.response.data.errors\r\n                    let reducedErrors = errors.reduce((acc, cur)=>({...acc, [cur.fieldName]: cur.message}),{})\r\n                    setErrors(reducedErrors);\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let volume = this.state.item.volume;\r\n        let priceForLiter = this.state.item.priceForLiter;\r\n        let refuelDate = this.state.item.refuelDate.toLocaleDateString('en-CA');\r\n        let refuelTime = this.state.item.refuelDate.toLocaleTimeString();\r\n        return (\r\n            <div className=\"container\">\r\n                <AppNavbar />\r\n                <Formik\r\n                    initialValues={{ volume, priceForLiter, refuelDate, refuelTime }}\r\n                    onSubmit={this.onSubmit}\r\n                    validateOnChange={false}\r\n                    validateOnBlur={false}\r\n                    validate={this.validate}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {\r\n                        (props) => (\r\n                            <Form>\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>volume</label>\r\n                                    <ErrorMessage name=\"volume\" component=\"div\" className=\"alert alert-warning\" />\r\n                                    <Field className=\"form-control\" type=\"number\" name=\"volume\" />\r\n                                </fieldset>\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>price for liter</label>\r\n                                    <ErrorMessage name=\"priceForLiter\" component=\"div\" className=\"alert alert-warning\" />\r\n                                    <Field className=\"form-control\" type=\"number\" name=\"priceForLiter\" />\r\n                                </fieldset>\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>refuel date</label>\r\n                                    <ErrorMessage name=\"refuelDate\" component=\"div\" className=\"alert alert-warning\" />\r\n                                    <Field className=\"form-control\" type=\"date\" name=\"refuelDate\" />\r\n                                </fieldset>\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>refuel time</label>\r\n                                    <ErrorMessage name=\"refuelTime\" component=\"div\" className=\"alert alert-warning\" />\r\n                                    <Field className=\"form-control\" type=\"time\" name=\"refuelTime\" />\r\n                                </fieldset>\r\n                                <button className=\"btn btn-success\" type=\"submit\">Save</button>\r\n                            </Form>\r\n                        )\r\n                    }\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddRefuelComponent","import { Component } from \"react\";\r\nimport { Redirect, Route } from \"react-router-dom\";\r\nimport AuthenticationService from \"./AuthenticationService\";\r\nclass AuthenticatedRoute extends Component {\r\n    render() {\r\n        if(AuthenticationService.isUserLoggedIn()) {\r\n            return <Route {...this.props}/>\r\n        } else {\r\n            return <Redirect to=\"/login\"/>\r\n        }\r\n    }\r\n}\r\n\r\nexport default AuthenticatedRoute;","export default __webpack_public_path__ + \"static/media/blood-drop.aca97268.png\";","import { Component } from \"react\";\r\nimport AppNavbar from \"./AppNavbar\";\r\nimport AuthenticationService from \"./AuthenticationService\";\r\nimport CarsDataService from \"./CarsDataService\";\r\nimport refuelIcon from \"../img/blood-drop.png\";\r\nclass CarListComponent extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            cars: [],\r\n            message: null\r\n        }\r\n\r\n        this.refreshCars = this.refreshCars.bind(this);\r\n        this.updateCar = this.updateCar.bind(this);\r\n        this.deleteCar = this.deleteCar.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshCars();\r\n        \r\n    }\r\n\r\n    refreshCars() {\r\n        CarsDataService.retreiveAllCars()\r\n            .then(\r\n                response=> {\r\n\r\n                    this.setState({\r\n                        cars: response.data\r\n                    });\r\n                }\r\n            ) \r\n    }\r\n\r\n    addCar() {\r\n        this.props.history.push(\"/cars/new\")\r\n    }\r\n\r\n    updateCar(id) {\r\n        this.props.history.push(`/cars/${id}`)\r\n    }\r\n\r\n    deleteCar(id) {\r\n        CarsDataService.deleteCar(id)\r\n            .then(\r\n                ()=> {\r\n                    this.setState({\r\n                        message: `Delete of car ${id} succesfull`\r\n                    })\r\n                    this.refreshCars();\r\n                }\r\n            )\r\n        \r\n    }\r\n    addRefuel(id) {\r\n        this.props.history.push(`/cars/${id}/refuels/new`)\r\n    }\r\n\r\n    showRefuels(id) {\r\n        this.props.history.push(`/cars/${id}/refuels`)\r\n    }\r\n    showStats(id) {\r\n        this.props.history.push(`/cars/${id}/stats`)\r\n    }\r\n    render() {\r\n        const isLoggedIn = AuthenticationService.isUserLoggedIn();\r\n        let message = \"\";\r\n        if(!isLoggedIn) {\r\n            message = <div className=\"alert alert-warning\">Please login to see list of your cars</div>\r\n        } else if(isLoggedIn && this.state.cars.length===0) {\r\n            message = <div className=\"alert alert-warning\">Please add first car</div>\r\n        }\r\n        return (\r\n            <div className=\"container\">\r\n                 <AppNavbar/>\r\n                <h3>All cars</h3>\r\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>brand</th>\r\n                            <th>model</th>\r\n                            <th>Fuel type</th>\r\n                            <th>production year</th>\r\n                            <th>plate</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {\r\n                        this.state.cars.map(\r\n                            car =>\r\n                            <tr key={car.id}>\r\n                                <td>{car.id}</td>\r\n                                <td>{car.brand}</td>\r\n                                <td>{car.model}</td>\r\n                                <td>{car.fuelType}</td>\r\n                                <td>{car.productionYear}</td>\r\n                                <td>{car.plate}</td>\r\n                                <td><button className=\"btn btn-success btn-lg\" onClick={() => this.addRefuel(car.id)}><img src={refuelIcon} height=\"40rem\"/>Add refuel</button>\r\n                                    <button className=\"btn btn-success btn-lg\" onClick={() => this.showStats(car.id)}>show summary</button></td>\r\n                                <td className=\"btn-group-vertical\">\r\n                                <button className=\"btn btn-success btn-sm\" onClick={() => this.showRefuels(car.id)}>show refuels</button>\r\n                                <button className=\"btn btn-info btn-sm\" onClick={() => this.updateCar(car.id)}>Update car</button>\r\n                                <button className=\"btn btn-warning btn-sm\" onClick={() => this.deleteCar(car.id)}>Delete car</button></td>\r\n                            </tr>\r\n                        )\r\n                    }\r\n                    </tbody>\r\n                </table>\r\n                {message}\r\n                <button className=\"btn btn-success\" onClick={() => this.addCar()}>Add new car</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CarListComponent;","import { Component } from \"react\";\r\nimport AppNavbar from \"./AppNavbar\";\r\nimport AuthenticationService from \"./AuthenticationService\";\r\n\r\nclass HomeComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loggedIn: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            loggedIn: AuthenticationService.isUserLoggedIn()\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let message;\r\n        if(!this.state.loggedIn) {\r\n            message = <p>Here you can <a href=\"/register\">register</a> or <a href=\"/login\">login</a></p>\r\n        } else {\r\n            message = <p>Here you can see list of your <a href=\"/cars\">cars</a></p>\r\n        }\r\n        return (\r\n            <div>\r\n                <AppNavbar/>\r\n                <div className=\"container justify-contnent-center\">\r\n                    <br/><br/>\r\n                    <h2>Vehicle management app</h2>\r\n                    <p>App for tracking refuels, car's mileage, fuel consumption and more. You can manage many cars and have summarry of costs in one place  </p>\r\n                    {message}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HomeComponent","import { Component } from \"react\";\r\nimport AuthenticationService from './AuthenticationService'\r\nimport {Formik, Form, ErrorMessage, Field} from 'formik'\r\nimport AppNavbar from \"./AppNavbar\";\r\nclass LoginComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            badLoginMessage: false\r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onSubmit(values) {\r\n        AuthenticationService.executeBasicAuth(values.username, values.password)\r\n            .then(() => {\r\n                this.props.history.push('/cars');\r\n            })\r\n            .catch(()=> {\r\n                this.setState({\r\n                    badLoginMessage: true\r\n                })\r\n            })\r\n    }\r\n    render() {\r\n        let username = this.state.username;\r\n        let password = this.state.password;\r\n        return (\r\n            <div className=\"container\">\r\n                <AppNavbar/>\r\n                <br/>\r\n                {this.state.badLoginMessage && <div className=\"alert alert-danger\">Bad credentials</div>}\r\n                <Formik\r\n                initialValues={{ username, password}}\r\n                        onSubmit={this.onSubmit}\r\n                        validateOnChange={false}\r\n                        validateOnBlur={false}\r\n                        validate={this.validate}\r\n                        enableReinitialize={true}\r\n                        >\r\n                        {\r\n                            (props)=> (\r\n                                <Form>\r\n                                <fieldset className=\"form-group\">\r\n                                        <label>username</label>\r\n                                        <ErrorMessage name=\"username\" component=\"div\" className=\"alert alert-warning\"/>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"username\" />\r\n                                    </fieldset>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>password</label>\r\n                                        <ErrorMessage name=\"password\" component=\"div\" className=\"alert alert-warning\"/>\r\n                                        <Field className=\"form-control\" type=\"password\" name=\"password\" />\r\n                                    </fieldset>\r\n                                    <button className=\"btn btn-success\" type=\"submit\">login</button>\r\n\r\n                                </Form>\r\n                            )\r\n                        }\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginComponent;","import { Component } from \"react\";\r\nimport AppNavbar from \"./AppNavbar\";\r\nimport AuthenticationService from \"./AuthenticationService\";\r\n\r\nclass LogoutComponent extends Component {\r\n    render() {\r\n        AuthenticationService.logoutUser();\r\n\r\n        return (\r\n            <div>\r\n                <AppNavbar/>\r\n                <br/>\r\n                <div className=\"alert alert-warning\">Logout successful</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LogoutComponent;","import { Component } from \"react\";\r\nimport RefuelsDataService from './RefuelsDataService'\r\nimport AppNavbar from './AppNavbar'\r\nimport AuthenticationService from './AuthenticationService'\r\nclass RefuelsListComponent extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            refuels: [],\r\n            message: null\r\n        }\r\n\r\n        this.refreshRefuels = this.refreshRefuels.bind(this);\r\n        this.updateRefuels = this.updateRefuels.bind(this);\r\n        this.deleteRefuel = this.deleteRefuel.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshRefuels();\r\n        \r\n    }\r\n\r\n    refreshRefuels() {\r\n         RefuelsDataService.retreiveAllRefuels(this.props.match.params.carId)\r\n            .then(\r\n                response=> {\r\n\r\n                    this.setState({\r\n                        refuels: response.data\r\n                    });\r\n                }\r\n            ) \r\n    }\r\n\r\n    addRefuel() {\r\n        this.props.history.push(`/cars/${this.props.match.params.carId}/refuels/new`)\r\n    }\r\n\r\n    updateRefuels(id) {\r\n        this.props.history.push(`/cars/${this.props.match.params.carId}/refuels/${id}`)\r\n    }\r\n\r\n    deleteRefuel(id) {\r\n        RefuelsDataService.deleteRefuel(this.props.match.params.carId, id)\r\n            .then(\r\n                ()=> {\r\n                    this.setState({\r\n                        message: `Delete of refuel ${id} succesful`\r\n                    })\r\n                    this.refreshRefuels();\r\n                }\r\n            )\r\n        \r\n    }\r\n\r\n    showRefuels(id) {\r\n        this.props.history.push(`/cars/${id}/refuels`)\r\n    }\r\n    \r\n    render() {\r\n        const isLoggedIn = AuthenticationService.isUserLoggedIn();\r\n        let message = \"\";\r\n        if(!isLoggedIn) {\r\n            message = <div className=\"alert alert-warning\">Please login to see list of your cars</div>\r\n        } else if(isLoggedIn && this.state.refuels.length===0) {\r\n            message = <div className=\"alert alert-warning\">Please add first refuel</div>\r\n        }\r\n        return (\r\n            <div className=\"container\">\r\n                 <AppNavbar/>\r\n                <h3>All refuels</h3>\r\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>volume</th>\r\n                            <th>price for liter</th>\r\n                            <th>refuel date</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {\r\n                        this.state.refuels.map(\r\n                            refuel =>\r\n                            <tr key={refuel.id}>\r\n                                <td>{refuel.id}</td>\r\n                                <td>{refuel.volume}</td>\r\n                                <td>{refuel.priceForLiter}</td>\r\n                                <td>{refuel.refuelDate}</td>\r\n                                <td><button className=\"btn btn-info\" onClick={() => this.updateRefuels(refuel.id)}>Update</button>\r\n                                <button className=\"btn btn-warning\" onClick={() => this.deleteRefuel(refuel.id)}>Delete</button></td>\r\n                            </tr>\r\n                        )\r\n                    }\r\n                    </tbody>\r\n                </table>\r\n                {message}\r\n                <button className=\"btn btn-success\" onClick={() => this.addRefuel()}>Add new refuel</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default RefuelsListComponent","import { Component } from \"react\";\r\nimport AppNavbar from \"./AppNavbar\";\r\nimport { Formik, Form, ErrorMessage, Field} from 'formik'\r\nimport AuthenticationService from \"./AuthenticationService\";\r\nclass RegisterComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            role: 'USER',\r\n            successMessage: null\r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n\r\n\r\n    }\r\n\r\n    async onSubmit(values, {setErrors}) {\r\n        await AuthenticationService.register(values)\r\n            .then((response) => {\r\n                this.setState({\r\n                    successMessage: response.data.message\r\n                })\r\n            }).catch(err => {\r\n                let errors = err.response.data.errors\r\n                let reducedErrors = errors.reduce((acc, cur)=>({...acc, [cur.fieldName]: cur.message}),{})\r\n                setErrors(reducedErrors);\r\n            })\r\n    }\r\n\r\n    render() {\r\n\r\n        let username = '';\r\n        let email = '';\r\n        let password = '';\r\n        let role = this.state.role;\r\n        let status;\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <AppNavbar />\r\n                {this.state.successMessage && <div className=\"alert alert-success\">Registration successful! Now you can <a href=\"/login\">login</a></div>}\r\n                <Formik\r\n                    initialValues={{ username, email, password, role }}\r\n                    onSubmit={this.onSubmit}\r\n                    validateOnChange={false}\r\n                    validateOnBlur={false}\r\n                    validate={this.validate}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {\r\n                        (props) => (\r\n                            <Form>\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>username</label>\r\n                                    <ErrorMessage name=\"username\" component=\"div\" className=\"alert alert-warning\" />\r\n                                    <Field className=\"form-control\" type=\"text\" name=\"username\" />\r\n                                </fieldset>\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>email</label>\r\n                                    <ErrorMessage name=\"email\" component=\"div\" className=\"alert alert-warning\" />\r\n                                    <Field className=\"form-control\" type=\"text\" name=\"email\" />\r\n                                </fieldset>\r\n                                <fieldset className=\"form-group\">\r\n                                    <label>password</label>\r\n                                    <ErrorMessage name=\"password\" component=\"div\" className=\"alert alert-warning\" />\r\n                                    <Field className=\"form-control\" type=\"password\" name=\"password\" />\r\n                                </fieldset>\r\n                                <button className=\"btn btn-success\" type=\"submit\">register</button>\r\n\r\n                            </Form>\r\n                        )\r\n                    }\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default RegisterComponent;","import axios from 'axios'\r\n\r\nconst API_URL = 'http://fuelmng-env.eba-taegx2jp.eu-central-1.elasticbeanstalk.com'\r\n\r\n\r\nclass StatsSummaryDataService {\r\n    \r\n    retreiveAllRefuelsForCar(carId, startDate, endDate) {\r\n        const URL = `${API_URL}/cars/${carId}/stats?startDate=${startDate}&endDate=${endDate}`;\r\n        return axios.get(URL,\r\n          {headers: { Authorization: localStorage.getItem(\"user\")}});\r\n    }\r\n}\r\n\r\nexport default new StatsSummaryDataService()","import { Component } from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport AppNavbar from \"./AppNavbar\";\r\nimport StatsSummaryDataService from \"./StatsSummaryDataService\";\r\n\r\nclass StatsSummaryComponent extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            carId: this.props.match.params.carId,\r\n            startDate: new Date(2020,1,1).toISOString().substr(0, 10),\r\n            endDate: new Date().toISOString().substr(0, 10),\r\n            item: null\r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n\r\n    }\r\n\r\n    onSubmit(values) {\r\n        StatsSummaryDataService.retreiveAllRefuelsForCar(this.state.carId, values.startDate, values.endDate)\r\n        .then(response => {\r\n            \r\n            this.setState({ item: response.data })\r\n            console.log(this.state.item)\r\n        })    \r\n    }\r\n\r\n    render() {\r\n\r\n        let startDate = this.state.startDate;\r\n        let endDate = this.state.endDate;\r\n        let summaryTable;\r\n        let item = this.state.item;\r\n        if(this.state.item != null) {\r\n            if(this.state.item.totalRefuels === 0) {\r\n                summaryTable = <div><div className=\"alert alert-warning\">No refuels in selected time</div></div>\r\n            } else {\r\n                summaryTable = \r\n            <table className=\"table\">\r\n            <tbody>\r\n            <tr>\r\n                <td>Total price:</td><td>{item.totalPrice}</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Total volume:</td><td>{item.totalVolume}</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Total refuels:</td><td>{item.totalRefuels}</td>\r\n            </tr>\r\n            <tr>\r\n                <td>average price per liter:</td><td>{item.avgPricePerLiter}</td>\r\n            </tr>\r\n            </tbody>\r\n            </table>\r\n        }\r\n        }\r\n        return (\r\n            <div className=\"container\">\r\n            <AppNavbar />\r\n            <br/>\r\n            <Formik\r\n                initialValues={{startDate, endDate}}\r\n                onSubmit={this.onSubmit}\r\n                validateOnChange={false}\r\n                validateOnBlur={false}\r\n                validate={this.validate}\r\n                enableReinitialize={true}\r\n            >\r\n                {\r\n                    (props) => (\r\n                        <Form>\r\n                            <fieldset className=\"input-group mb-3\">\r\n                            <span className=\"input-group-text\">start date</span>\r\n                                <ErrorMessage name=\"startDate\" component=\"span\" className=\"alert alert-warning\" />\r\n                                <Field className=\"form-control\" type=\"date\" name=\"startDate\" />\r\n                                <span className=\"input-group-text\">end date</span>\r\n                                <ErrorMessage name=\"endDate\" component=\"span\" className=\"alert alert-warning\" />\r\n                                <Field className=\"form-control\" type=\"date\" name=\"endDate\" />\r\n                            </fieldset>\r\n                            <button className=\"btn btn-success\" type=\"submit\">Get</button>\r\n\r\n                        </Form>\r\n                    )\r\n                }\r\n            </Formik>\r\n            {summaryTable}\r\n        </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default StatsSummaryComponent","import { Component } from \"react\";\r\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\r\nimport AddCarComponent from \"./AddCarComponent\";\r\nimport AddRefuelComponent from \"./AddRefuelComponent\";\r\nimport AuthenticatedRoute from \"./AuthenticatedRoute\";\r\nimport CarListComponent from \"./CarListComponent\";\r\nimport HomeComponent from \"./HomeComponent\";\r\nimport LoginComponent from './LoginComponent'\r\nimport LogoutComponent from \"./LogoutComponent\";\r\nimport RefuelsListComponent from \"./RefuelsListComponent\";\r\nimport RegisterComponent from \"./RegisterComponent\";\r\nimport StatsSummaryComponent from \"./StatsSummaryComponent\";\r\n\r\nclass FuelManagmentApp extends Component {\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <Switch>\r\n                <Route exact path=\"/\" component={HomeComponent}/>\r\n                <AuthenticatedRoute path=\"/cars/:carId/refuels/:refuelId\" component={AddRefuelComponent}/>\r\n                <AuthenticatedRoute path=\"/cars/:carId/refuels/\" component={RefuelsListComponent}/>\r\n                <AuthenticatedRoute path=\"/cars/:carId/stats\" component={StatsSummaryComponent}/>\r\n                <AuthenticatedRoute path=\"/cars/:carId\" component={AddCarComponent}/>\r\n                <AuthenticatedRoute path=\"/cars\" component={CarListComponent}/>\r\n                <Route path=\"/register\" component={RegisterComponent}/>\r\n                <Route path=\"/login\" component={LoginComponent}/>\r\n                <AuthenticatedRoute path=\"/logout\" component={LogoutComponent}/>\r\n                </Switch>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FuelManagmentApp;","import React, {Component} from 'react';\nimport './App.css';\nimport FuelManagmentApp from './components/FuelManagmentApp';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <FuelManagmentApp/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}